import logging
from telegram import Update, ParseMode, Bot
from telegram.error import BadRequest
from telegram.ext import CallbackContext
from .database import (
    add_or_update_user, get_chat_info, start_chat_tracking, 
    add_expense, add_debt, delete_entry,
    get_all_expenses, get_all_debts, get_user_names
)

logger = logging.getLogger(__name__)

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (v2.1).\n\n'
        '–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≤–∞—à –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–Ω—É–∂–Ω–æ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É ```/start_tracking``` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
        parse_mode=ParseMode.MARKDOWN
    )

def ping(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("Pong! –Ø –≤ —Å–µ—Ç–∏ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def get_chat_id(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`")

def start_tracking(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    if get_chat_info(chat_id):
        update.message.reply_text('–£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –≤–µ–¥–µ—Ç—Å—è.')
        return

    message_text = 'üìä **–£—á–µ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã.'
    sent_message = update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN)
    try:
        context.bot.pin_chat_message(chat_id, sent_message.message_id)
        start_chat_tracking(chat_id, sent_message.message_id)
        logger.info(f"–ù–∞—á–∞—Ç —É—á–µ—Ç –≤ —á–∞—Ç–µ {chat_id}")
    except BadRequest:
        update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')

def owe(update: Update, context: CallbackContext) -> None:
    message = update.message
    if not get_chat_info(message.chat_id):
        return # Silently ignore

    if not message.reply_to_message:
        message.reply_text("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã.")
        return

    try:
        debtor = message.from_user
        creditor = message.reply_to_message.from_user
        
        add_or_update_user(debtor.id, debtor.first_name)
        add_or_update_user(creditor.id, creditor.first_name)

        amount = float(context.args[0].replace(',', '.'))
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'

        add_debt(message.chat_id, debtor.id, creditor.id, amount, reason, message.message_id)

        message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω –¥–æ–ª–≥: {debtor.first_name} –¥–æ–ª–∂–µ–Ω(–Ω–∞) {creditor.first_name} {amount:.2f} –ª–∏—Ä ({reason}).")
        update_summary_message(context.bot, message.chat_id)

    except (IndexError, ValueError):
        message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /owe <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /owe: {e}")
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–≥–∞.")

def handle_expense(update: Update, context: CallbackContext) -> None:
    message = update.message
    if not get_chat_info(message.chat_id):
        return

    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2: return
        
        amount = float(parts[0].replace(',', '.'))
        if amount <= 0: return
        
        description = parts[1]
        user = message.from_user

        add_or_update_user(user.id, user.first_name)
        add_expense(message.chat_id, user.id, amount, description, message.message_id)

        reply_text = f"‚úÖ –ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: {amount:.2f} –∑–∞ '{description}' –æ—Ç {user.first_name}."
        message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        
        update_summary_message(context.bot, message.chat_id)

    except (ValueError, IndexError):
        pass
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_expense: {e}", exc_info=True)

def delete_entry(update: Update, context: CallbackContext) -> None:
    message = update.message
    if not get_chat_info(message.chat_id):
        return

    if not message.reply_to_message:
        message.reply_text("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–µ –∫–æ–º–∞–Ω–¥–æ–π /delete")
        return

    reply_to_id = message.reply_to_message.message_id
    deleted_type = delete_entry(message.chat_id, reply_to_id)

    if deleted_type == 'expense':
        deleted_info = "–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω."
    elif deleted_type == 'debt':
        deleted_info = "–î–æ–ª–≥ —É–¥–∞–ª–µ–Ω."
    else:
        deleted_info = "–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ."

    message.reply_text(f"‚úÖ {deleted_info}")
    if deleted_info != "–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ.":
        update_summary_message(context.bot, message.chat_id)

def update_summary_message(bot: Bot, chat_id: int) -> None:
    chat_info = get_chat_info(chat_id)
    if not chat_info:
        return

    summary_message_id = chat_info['message_id']
    all_expenses = get_all_expenses(chat_id)
    all_debts = get_all_debts(chat_id)

    user_ids = set()
    for exp in all_expenses:
        user_ids.add(exp['user_id'])
    for debt in all_debts:
        user_ids.add(debt['from_user_id'])
        user_ids.add(debt['to_user_id'])

    user_names = get_user_names(list(user_ids))
    user_totals = {uid: 0.0 for uid in user_ids}
    final_balances = {uid: 0.0 for uid in user_ids}

    for exp in all_expenses:
        user_totals[exp['user_id']] += exp['amount']

    summary_lines = []
    if all_expenses:
        summary_lines.append("*–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:*")
        sorted_expenses = sorted(all_expenses, key=lambda x: x.get('timestamp', 0), reverse=True)
        for expense in sorted_expenses:
            user_name = user_names.get(str(expense['user_id']), 'Unknown')
            summary_lines.append(f"  - {expense['amount']:.2f} ({user_name}): {expense['description']}")
        summary_lines.append("")

    if any(v > 0 for v in user_totals.values()):
        total_spent = sum(user_totals.values())
        num_users_in_expenses = len(set(exp['user_id'] for exp in all_expenses))
        average_spent = total_spent / num_users_in_expenses if num_users_in_expenses > 0 else 0

        summary_lines.append("*–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*")
        for user_id, total in user_totals.items():
            if total > 0:
                final_balances[user_id] = total - average_spent
                summary_lines.append(f"  - {user_names.get(str(user_id), 'Unknown')}: {total:.2f} –ª–∏—Ä")
        summary_lines.extend([f"\n*–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {total_spent:.2f} –ª–∏—Ä", f"*–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:* {average_spent:.2f} –ª–∏—Ä"])

    if all_debts:
        summary_lines.append("\n*–õ–∏—á–Ω—ã–µ –¥–æ–ª–≥–∏:*")
        for debt in all_debts:
            from_name = user_names.get(str(debt['from_user_id']), 'Unknown')
            to_name = user_names.get(str(debt['to_user_id']), 'Unknown')
            summary_lines.append(f"  - {from_name} ‚Üí {to_name}: {debt['amount']:.2f} –ª–∏—Ä ({debt['reason']})")
            final_balances[debt['from_user_id']] -= debt['amount']
            final_balances[debt['to_user_id']] += debt['amount']

    if final_balances:
        summary_lines.append("\n*–ò–¢–û–ì–û–í–´–ô –ë–ê–õ–ê–ù–°:*")
        balances_list = [{'name': user_names.get(str(uid), f'User {uid}'), 'balance': bal} for uid, bal in final_balances.items()]
        positive = sorted([b for b in balances_list if b['balance'] > 0.01], key=lambda x: x['balance'], reverse=True)
        negative = sorted([b for b in balances_list if b['balance'] < -0.01], key=lambda x: x['balance'])
        i, j = 0, 0
        while i < len(negative) and j < len(positive):
            debtor, creditor = negative[i], positive[j]
            amount = min(-debtor['balance'], creditor['balance'])
            summary_lines.append(f"  - {debtor['name']} –¥–æ–ª–∂–µ–Ω(–Ω–∞) {creditor['name']}: {amount:.2f} –ª–∏—Ä")
            debtor['balance'] += amount
            creditor['balance'] -= amount
            if abs(debtor['balance']) < 0.01: i += 1
            if abs(creditor['balance']) < 0.01: j += 1

    final_text = 'üìä **–£—á–µ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n' + ('–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã.' if not summary_lines else '\n'.join(summary_lines))

    if len(final_text) > 4096:
        final_text = final_text[:4090] + "..."

    try:
        bot.edit_message_text(chat_id=chat_id, message_id=summary_message_id, text=final_text, parse_mode=ParseMode.MARKDOWN)
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
