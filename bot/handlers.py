import logging
import sqlite3
from telegram import Update, ParseMode, Bot
from telegram.error import BadRequest
from telegram.ext import CallbackContext
from .config import DB_FILE, ENV, ACTIVE_CHAT_ID
from .database import add_or_update_user

logger = logging.getLogger(__name__)

def send_startup_notification(bot: Bot):
    if ACTIVE_CHAT_ID:
        try:
            bot.send_message(chat_id=ACTIVE_CHAT_ID, text=f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏! (v2.0 - {ENV.upper()})")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ —á–∞—Ç {ACTIVE_CHAT_ID}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (v1.7 - {ENV.upper()}).\n\n'
        '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–µ –∫–æ–º–∞–Ω–¥–æ–π `/delete`.',
        parse_mode=ParseMode.MARKDOWN
    )

def ping(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("Pong! –Ø –≤ —Å–µ—Ç–∏ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

def get_chat_id(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`")

def start_tracking(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT message_id FROM chats WHERE chat_id = ?", (chat_id,))
    if cursor.fetchone():
        update.message.reply_text('–£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ —É–∂–µ –≤–µ–¥–µ—Ç—Å—è.')
        conn.close()
        return

    message_text = 'üìä **–£—á–µ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã.'
    sent_message = update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN)
    try:
        context.bot.pin_chat_message(chat_id, sent_message.message_id)
        cursor.execute("INSERT INTO chats (chat_id, message_id) VALUES (?, ?)", (chat_id, sent_message.message_id))
        conn.commit()
        logger.info(f"–ù–∞—á–∞—Ç —É—á–µ—Ç –≤ —á–∞—Ç–µ {chat_id}")
    except BadRequest:
        update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
    finally:
        conn.close()

def reset_tracking(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT message_id FROM chats WHERE chat_id = ?", (chat_id,))
    row = cursor.fetchone()
    if row:
        try:
            context.bot.unpin_chat_message(chat_id, row[0])
        except Exception: pass
        cursor.execute("DELETE FROM expenses WHERE chat_id = ?", (chat_id,))
        cursor.execute("DELETE FROM debts WHERE chat_id = ?", (chat_id,))
        cursor.execute("DELETE FROM chats WHERE chat_id = ?", (chat_id,))
        conn.commit()
        update.message.reply_text('–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ–ª–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã.')
    else:
        update.message.reply_text('–£—á–µ—Ç –Ω–µ –≤–µ–¥–µ—Ç—Å—è.')
    conn.close()

def owe(update: Update, context: CallbackContext) -> None:
    message = update.message
    if not message.reply_to_message:
        message.reply_text("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã.")
        return
    try:
        debtor, creditor = message.from_user, message.reply_to_message.from_user
        add_or_update_user(debtor.id, debtor.first_name)
        add_or_update_user(creditor.id, creditor.first_name)

        amount = float(context.args[0].replace(',', '.'))
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO debts (message_id, chat_id, from_user_id, to_user_id, amount, reason) VALUES (?, ?, ?, ?, ?, ?)",
                       (message.message_id, message.chat_id, debtor.id, creditor.id, amount, reason))
        conn.commit()
        conn.close()

        message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω –¥–æ–ª–≥: {debtor.first_name} –¥–æ–ª–∂–µ–Ω(–Ω–∞) {creditor.first_name} {amount:.2f} –ª–∏—Ä ({reason}).")
        update_summary_message(context.bot, message.chat_id)
    except (IndexError, ValueError):
        message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /owe <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /owe: {e}")
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–≥–∞.")

def handle_expense(update: Update, context: CallbackContext) -> None:
    message = update.message
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2: return
        amount = float(parts[0].replace(',', '.'))
        if amount <= 0: return

        user = message.from_user
        add_or_update_user(user.id, user.first_name)

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        cursor.execute("SELECT SUM(amount) FROM expenses WHERE chat_id = ? AND user_id = ?", (message.chat_id, user.id))
        total_before = cursor.fetchone()[0] or 0.0

        cursor.execute("INSERT INTO expenses (message_id, chat_id, user_id, amount, description) VALUES (?, ?, ?, ?, ?)",
                       (message.message_id, message.chat_id, user.id, amount, parts[1]))
        conn.commit()
        conn.close()

        total_after = total_before + amount
        reply_text = (f"‚úÖ –ó–∞–ø–∏—Å–∞–ª!\n\n**{user.first_name}**:\n–ë—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_before:.2f} –ª–∏—Ä\n–°—Ç–∞–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_after:.2f} –ª–∏—Ä")
        message.reply_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        update_summary_message(context.bot, message.chat_id)
    except (ValueError, IndexError): pass
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_expense: {e}", exc_info=True)

def delete_entry(update: Update, context: CallbackContext) -> None:
    message = update.message
    if not message.reply_to_message:
        message.reply_text("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–µ –∫–æ–º–∞–Ω–¥–æ–π /delete")
        return

    reply_to_id = message.reply_to_message.message_id
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    cursor.execute("DELETE FROM expenses WHERE message_id = ?", (reply_to_id,))
    if cursor.rowcount > 0:
        deleted_info = "–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω."
    else:
        cursor.execute("DELETE FROM debts WHERE message_id = ?", (reply_to_id,))
        if cursor.rowcount > 0:
            deleted_info = "–î–æ–ª–≥ —É–¥–∞–ª–µ–Ω."
        else:
            deleted_info = "–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ."

    conn.commit()
    conn.close()
    message.reply_text(f"‚úÖ {deleted_info}")
    if deleted_info != "–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ.":
        update_summary_message(context.bot, message.chat_id)

def update_summary_message(bot: Bot, chat_id: int) -> None:
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute("SELECT message_id FROM chats WHERE chat_id = ?", (chat_id,))
    chat_row = cursor.fetchone()
    if not chat_row:
        conn.close()
        return

    summary_message_id = chat_row['message_id']

    user_totals, user_names, final_balances = {}, {}, {}

    cursor.execute("SELECT user_id, name FROM users")
    for row in cursor.fetchall():
        user_names[row['user_id']] = row['name']

    cursor.execute("SELECT user_id, SUM(amount) as total FROM expenses WHERE chat_id = ? GROUP BY user_id", (chat_id,))
    for row in cursor.fetchall():
        user_totals[row['user_id']] = row['total']

    all_user_ids = set(user_totals.keys())
    cursor.execute("SELECT from_user_id, to_user_id FROM debts WHERE chat_id = ?", (chat_id,))
    for row in cursor.fetchall():
        all_user_ids.add(row['from_user_id'])
        all_user_ids.add(row['to_user_id'])

    for user_id in all_user_ids:
        user_totals.setdefault(user_id, 0.0)

    summary_lines = []
    if any(v > 0 for v in user_totals.values()):
        total_spent = sum(user_totals.values())
        num_users = len(user_totals)
        average_spent = total_spent / num_users if num_users > 0 else 0

        summary_lines.append("*–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*")
        for user_id, total in user_totals.items():
            final_balances[user_id] = total - average_spent
            summary_lines.append(f"  - {user_names.get(user_id, 'Unknown')}: {total:.2f} –ª–∏—Ä")
        summary_lines.extend([f"\n*–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {total_spent:.2f} –ª–∏—Ä", f"*–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:* {average_spent:.2f} –ª–∏—Ä"])

    cursor.execute("SELECT d.from_user_id, u1.name as from_name, d.to_user_id, u2.name as to_name, d.amount, d.reason FROM debts d JOIN users u1 ON d.from_user_id = u1.user_id JOIN users u2 ON d.to_user_id = u2.user_id WHERE d.chat_id = ?", (chat_id,))
    debts_data = cursor.fetchall()
    if debts_data:
        summary_lines.append("\n*–õ–∏—á–Ω—ã–µ –¥–æ–ª–≥–∏:*")
        for row in debts_data:
            summary_lines.append(f"  - {row['from_name']} ‚Üí {row['to_name']}: {row['amount']:.2f} –ª–∏—Ä ({row['reason']})")
            final_balances[row['from_user_id']] = final_balances.get(row['from_user_id'], 0) - row['amount']
            final_balances[row['to_user_id']] = final_balances.get(row['to_user_id'], 0) + row['amount']

    if final_balances:
        summary_lines.append("\n*–ò–¢–û–ì–û–í–´–ô –ë–ê–õ–ê–ù–°:*")
        balances_list = [{'name': user_names.get(uid, f'User {uid}'), 'balance': bal} for uid, bal in final_balances.items()]
        positive = sorted([b for b in balances_list if b['balance'] > 0.01], key=lambda x: x['balance'], reverse=True)
        negative = sorted([b for b in balances_list if b['balance'] < -0.01], key=lambda x: x['balance'])
        i, j = 0, 0
        while i < len(negative) and j < len(positive):
            debtor, creditor = negative[i], positive[j]
            amount = min(-debtor['balance'], creditor['balance'])
            summary_lines.append(f"  - {debtor['name']} –¥–æ–ª–∂–µ–Ω(–Ω–∞) {creditor['name']}: {amount:.2f} –ª–∏—Ä")
            debtor['balance'] += amount
            creditor['balance'] -= amount
            if abs(debtor['balance']) < 0.01: i += 1
            if abs(creditor['balance']) < 0.01: j += 1

    final_text = 'üìä **–£—á–µ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n' + ('–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã.' if not summary_lines else '```\n' + '\n'.join(summary_lines) + '\n```')

    try:
        bot.edit_message_text(chat_id=chat_id, message_id=summary_message_id, text=final_text, parse_mode=ParseMode.MARKDOWN_V2)
    except BadRequest as e:
        if 'Message to edit not found' in str(e):
            logger.warning("–°—Ç–∞—Ä–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ.")
            try:
                bot.unpin_all_chat_messages(chat_id=chat_id)
            except Exception: pass
            new_message = bot.send_message(chat_id=chat_id, text=final_text, parse_mode=ParseMode.MARKDOWN_V2)
            bot.pin_chat_message(chat_id=chat_id, message_id=new_message.message_id)
            cursor.execute("UPDATE chats SET message_id = ? WHERE chat_id = ?", (new_message.message_id, chat_id))
            conn.commit()
        elif "Message is not modified" not in str(e):
            pass
        else:
            logger.error(f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    conn.close()

def inactive_chat_handler(update: Update, context: CallbackContext) -> None:
    if ENV == 'test':
        message = "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
    else:
        message = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ."
    update.message.reply_text(message)
