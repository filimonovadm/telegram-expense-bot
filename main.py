import logging
import json
import os
from dotenv import load_dotenv
from telegram import Update, ParseMode, Bot
from telegram.error import BadRequest, TimedOut
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID_FOR_NOTIFICATIONS = os.getenv('CHAT_ID_FOR_NOTIFICATIONS')

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = 'data.json'
chat_data = {}
def save_data():
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(chat_data, f, ensure_ascii=False, indent=4)
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
def load_data():
    global chat_data
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            chat_data = json.load(f)
            chat_data = {int(k): v for k, v in chat_data.items()}
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except (FileNotFoundError, json.JSONDecodeError, Exception) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        chat_data = {}
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n'
        '‚úÖ *–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã*: `—Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ`\n'
        '   (–Ω–∞–ø—Ä–∏–º–µ—Ä: `1500 –ø—Ä–æ–¥—É–∫—Ç—ã`)\n\n'
        '‚úÖ *–õ–∏—á–Ω—ã–π –¥–æ–ª–≥*: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, '
        '–∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã, –∏ –Ω–∞–ø–∏—à–∏—Ç–µ:\n'
        '`/owe —Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ`\n'
        '   (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/owe 1000 –ø–æ–¥–∞—Ä–æ–∫`)\n\n'
        '–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start_tracking - –ù–∞—á–∞—Ç—å —É—á–µ—Ç –≤ —á–∞—Ç–µ\n'
        '/reset - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã\n'
        '/reset_debts - –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ –¥–æ–ª–≥–∏\n'
        '/getchatid - –£–∑–Ω–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞',
        parse_mode=ParseMode.MARKDOWN
    )
def get_chat_id(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª.")
def start_tracking(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    if chat_id in chat_data:
        update.message.reply_text('–£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –≤–µ–¥–µ—Ç—Å—è.')
        return
    message_text = 'üìä **–£—á–µ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã.'
    sent_message = update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN)
    try:
        context.bot.pin_chat_message(chat_id, sent_message.message_id)
        chat_data[chat_id] = {'message_id': sent_message.message_id, 'users': {}, 'debts': []}
        save_data()
        logger.info(f"–ù–∞—á–∞—Ç —É—á–µ—Ç –≤ —á–∞—Ç–µ {chat_id}")
    except BadRequest:
        update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
def reset_tracking(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    if chat_id in chat_data:
        try:
            context.bot.unpin_chat_message(chat_id, chat_data[chat_id]['message_id'])
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        del chat_data[chat_id]
        save_data()
        update.message.reply_text('–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ–ª–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã.')
    else:
        update.message.reply_text('–£—á–µ—Ç –Ω–µ –≤–µ–¥–µ—Ç—Å—è.')
def reset_debts(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    if chat_id in chat_data and 'debts' in chat_data[chat_id]:
        chat_data[chat_id]['debts'] = []
        save_data()
        update.message.reply_text('–õ–∏—á–Ω—ã–µ –¥–æ–ª–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã.')
        update_summary_message(context.bot, chat_id)
    else:
        update.message.reply_text('–£—á–µ—Ç –Ω–µ –≤–µ–¥–µ—Ç—Å—è.')
def owe(update: Update, context: CallbackContext) -> None:
    if not update.message.reply_to_message:
        update.message.reply_text("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã.")
        return
    chat_id = update.message.chat_id
    if chat_id not in chat_data:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —É—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /start_tracking")
        return
    try:
        debtor, creditor = update.message.from_user, update.message.reply_to_message.from_user
        if debtor.id == creditor.id:
            update.message.reply_text("–ù–µ–ª—å–∑—è –±—ã—Ç—å –¥–æ–ª–∂–Ω—ã–º —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return
        amount = float(context.args[0].replace(',', '.'))
        reason = ' '.join(context.args[1:]) if len(context.args) > 1 else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
        if amount <= 0:
            update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
            return
        debt_record = {'from_id': str(debtor.id), 'from_name': debtor.first_name, 'to_id': str(creditor.id), 'to_name': creditor.first_name, 'amount': amount, 'reason': reason}
        chat_data[chat_id].setdefault('debts', []).append(debt_record)
        save_data()
        update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω –¥–æ–ª–≥: {debtor.first_name} –¥–æ–ª–∂–µ–Ω(–Ω–∞) {creditor.first_name} {amount:.2f} –ª–∏—Ä ({reason}).")
        update_summary_message(context.bot, chat_id)
    except (IndexError, ValueError):
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /owe <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
    except TimedOut:
        logger.warning("–ü—Ä–æ–∏–∑–æ—à–µ–ª —Ç–∞–π–º-–∞—É—Ç. Telegram –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É.")
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /owe: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–≥–∞.")
def update_summary_message(bot: Bot, chat_id: int) -> None:
    if chat_id not in chat_data: return
    data = chat_data[chat_id]
    users_data = {int(k): v for k, v in data.get('users', {}).items()}
    debts_data = data.get('debts', [])
    summary_lines, final_balances = [], {}
    if users_data:
        total_spent = sum(user['total'] for user in users_data.values())
        num_users = len(users_data)
        average_spent = total_spent / num_users if num_users > 0 else 0
        summary_lines.append("*–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*")
        for user_id, user_info in users_data.items():
            final_balances[user_id] = user_info['total'] - average_spent
            summary_lines.append(f"  - {user_info['name']}: {user_info['total']:.2f} –ª–∏—Ä")
        summary_lines.extend([f"\n*–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* {total_spent:.2f} –ª–∏—Ä", f"*–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:* {average_spent:.2f} –ª–∏—Ä"])
    if debts_data:
        summary_lines.append("\n*–õ–∏—á–Ω—ã–µ –¥–æ–ª–≥–∏:*")
        for debt in debts_data:
            from_id, to_id = int(debt['from_id']), int(debt['to_id'])
            summary_lines.append(f"  - {debt['from_name']} ‚Üí {debt['to_name']}: {debt['amount']:.2f} –ª–∏—Ä ({debt['reason']})")
            final_balances[from_id] = final_balances.get(from_id, 0) - debt['amount']
            final_balances[to_id] = final_balances.get(to_id, 0) + debt['amount']
    if final_balances:
        summary_lines.append("\n*–ò–¢–û–ì–û–í–´–ô –ë–ê–õ–ê–ù–°:*")
        user_names = {u_id: u_info['name'] for u_id, u_info in users_data.items()}
        for debt in debts_data:
            user_names.setdefault(int(debt['from_id']), debt['from_name'])
            user_names.setdefault(int(debt['to_id']), debt['to_name'])
        balances_list = [{'name': user_names.get(uid, f'User {uid}'), 'balance': bal} for uid, bal in final_balances.items()]
        positive = sorted([b for b in balances_list if b['balance'] > 0], key=lambda x: x['balance'], reverse=True)
        negative = sorted([b for b in balances_list if b['balance'] < 0], key=lambda x: x['balance'])
        i, j = 0, 0
        while i < len(negative) and j < len(positive):
            debtor, creditor = negative[i], positive[j]
            amount = min(-debtor['balance'], creditor['balance'])
            if amount < 0.01: break
            summary_lines.append(f"  - {debtor['name']} –¥–æ–ª–∂–µ–Ω(–Ω–∞) {creditor['name']}: {amount:.2f} –ª–∏—Ä")
            debtor['balance'] += amount
            creditor['balance'] -= amount
            if round(debtor['balance'], 2) == 0: i += 1
            if round(creditor['balance'], 2) == 0: j += 1
    final_text = 'üìä **–£—á–µ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n' + ('–†–∞—Å—Ö–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã.' if not summary_lines else '```\n' + '\n'.join(summary_lines) + '\n```')
    try:
        bot.edit_message_text(chat_id=chat_id, message_id=data['message_id'], text=final_text, parse_mode=ParseMode.MARKDOWN_V2)
    except BadRequest: pass
def handle_expense(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    if chat_id not in chat_data: return
    try:
        parts = update.message.text.split(maxsplit=1)
        if len(parts) < 2: return
        amount = float(parts[0].replace(',', '.'))
        if amount <= 0: return
        user = update.message.from_user
        user_id_str = str(user.id)
        users = chat_data[chat_id].setdefault('users', {})
        if user_id_str not in users:
            users[user_id_str] = {'name': user.first_name, 'total': 0.0}
        users[user_id_str]['total'] += amount
        save_data()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ {amount} –æ—Ç {user.first_name} –≤ —á–∞—Ç–µ {chat_id}")
        update_summary_message(context.bot, chat_id)
    except (ValueError, IndexError):
        pass
    except TimedOut:
        logger.warning("–ü—Ä–æ–∏–∑–æ—à–µ–ª —Ç–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Ö–æ–¥–∞. –ñ–¥–µ–º –ø–æ–≤—Ç–æ—Ä–∞.")
        pass

def main() -> None:
    load_data()
    updater = Updater(TELEGRAM_BOT_TOKEN)
    dispatcher = updater.dispatcher

    if CHAT_ID_FOR_NOTIFICATIONS:
        try:
            bot = Bot(token=TELEGRAM_BOT_TOKEN)
            bot.send_message(chat_id=CHAT_ID_FOR_NOTIFICATIONS, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏!")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ —á–∞—Ç {CHAT_ID_FOR_NOTIFICATIONS}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    else:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHAT_ID_FOR_NOTIFICATIONS –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("getchatid", get_chat_id))
    dispatcher.add_handler(CommandHandler("start_tracking", start_tracking))
    dispatcher.add_handler(CommandHandler("reset", reset_tracking))
    dispatcher.add_handler(CommandHandler("owe", owe))
    dispatcher.add_handler(CommandHandler("reset_debts", reset_debts))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_expense))

    updater.start_polling(drop_pending_updates=False)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    updater.idle()

if __name__ == '__main__':
    main()
